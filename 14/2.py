from collections import Counter

PolyPattern = list[str]

instructions = {}
with open("input.txt") as file:
    initial_polymer = list(file.readline().strip())
    file.readline()
    for line in file:
        pair, child = line.strip().split(" -> ")
        instructions[(pair[0], pair[1])] = child


# generates the string pattern and Counter for a given input, over a certain number of steps
def generate_counts(pattern: PolyPattern, steps: int) -> tuple[PolyPattern, Counter]:
    polymer = pattern
    for step in range(steps):
        new_polymer = []
        for i in range(len(polymer) - 1):
            first = polymer[i]
            second = polymer[i+1]
            child = instructions[(first, second)]
            new_polymer.append(first)
            new_polymer.append(child)
        new_polymer.append(polymer[-1])
        polymer = new_polymer
        print(f"Step: {step} Length: {len(new_polymer)}")

    counts = Counter(polymer)
    return polymer, counts

# save this because you don't want to waste time regenerating it each time you try a new solution
# meta_counts = {('K', 'S'): Counter({'O': 194727, 'F': 166266, 'N': 138321, 'K': 106694, 'V': 97092, 'S': 85497, 'B': 85308, 'C': 64009, 'H': 57809, 'P': 52854}), ('S', 'P'): Counter({'O': 193433, 'F': 164816, 'N': 143801, 'K': 116616, 'V': 89973, 'B': 81150, 'S': 80153, 'C': 65977, 'H': 59629, 'P': 53029}), ('O', 'H'): Counter({'O': 195525, 'F': 164176, 'N': 149963, 'K': 119285, 'V': 83641, 'B': 82686, 'S': 77217, 'C': 66048, 'H': 59576, 'P': 50460}), ('V', 'C'): Counter({'O': 194465, 'F': 164131, 'N': 152182, 'K': 123883, 'V': 81047, 'B': 80500, 'S': 75427, 'C': 66340, 'H': 60267, 'P': 50335}), ('B', 'O'): Counter({'O': 193535, 'F': 165691, 'N': 140434, 'K': 110148, 'V': 95167, 'B': 84317, 'S': 84149, 'C': 64308, 'H': 58441, 'P': 52387}), ('C', 'V'): Counter({'O': 194495, 'F': 165884, 'N': 135649, 'K': 104601, 'V': 99664, 'S': 86016, 'B': 85773, 'C': 64568, 'H': 57840, 'P': 54087}), ('F', 'O'): Counter({'O': 194436, 'F': 164964, 'N': 146601, 'K': 118238, 'V': 87268, 'B': 80640, 'S': 79323, 'C': 65471, 'H': 59212, 'P': 52424}), ('K', 'V'): Counter({'O': 191280, 'F': 166028, 'N': 132703, 'V': 103905, 'K': 103180, 'S': 88519, 'B': 86185, 'C': 64280, 'H': 58000, 'P': 54497}), ('O', 'V'): Counter({'O': 192969, 'F': 164738, 'N': 144503, 'K': 116074, 'V': 89939, 'B': 82715, 'S': 80243, 'C': 65701, 'H': 59497, 'P': 52198}), ('N', 'B'): Counter({'O': 193387, 'F': 163696, 'N': 153432, 'K': 128395, 'V': 79089, 'B': 77115, 'S': 74080, 'C': 66879, 'H': 60884, 'P': 51620}), ('F', 'S'): Counter({'O': 193748, 'F': 164379, 'N': 145094, 'K': 117479, 'V': 88677, 'B': 81891, 'S': 80045, 'C': 65697, 'H': 59894, 'P': 51673}), ('K', 'B'): Counter({'O': 194318, 'F': 164115, 'N': 150418, 'K': 123387, 'V': 82589, 'B': 79319, 'S': 76474, 'C': 66256, 'H': 60209, 'P': 51492}), ('H', 'K'): Counter({'O': 193808, 'F': 163694, 'N': 150824, 'K': 123485, 'V': 82402, 'B': 80154, 'S': 76166, 'C': 66500, 'H': 60476, 'P': 51068}), ('V', 'P'): Counter({'O': 193264, 'F': 163576, 'N': 151193, 'K': 124759, 'V': 81911, 'B': 79181, 'S': 75885, 'C': 66758, 'H': 60693, 'P': 51357}), ('S', 'V'): Counter({'O': 194223, 'F': 165606, 'N': 137428, 'K': 108161, 'V': 97111, 'S': 84652, 'B': 83685, 'C': 65054, 'H': 58426, 'P': 54231}), ('F', 'P'): Counter({'O': 193515, 'F': 163719, 'N': 153310, 'K': 126702, 'V': 79744, 'B': 78996, 'S': 74682, 'C': 66570, 'H': 60798, 'P': 50541}), ('B', 'S'): Counter({'O': 191967, 'F': 165143, 'N': 141927, 'K': 113837, 'V': 93292, 'B': 83001, 'S': 82507, 'C': 65128, 'H': 59313, 'P': 52462}), ('B', 'P'): Counter({'O': 192040, 'F': 163247, 'N': 153491, 'K': 130431, 'V': 78861, 'B': 76080, 'S': 73387, 'C': 67385, 'H': 61443, 'P': 52212}), ('O', 'S'): Counter({'O': 193120, 'F': 166097, 'N': 136587, 'K': 105946, 'V': 99347, 'S': 86382, 'B': 85454, 'C': 64203, 'H': 58017, 'P': 53424}), ('P', 'B'): Counter({'O': 195616, 'F': 164773, 'N': 146130, 'K': 114767, 'V': 88000, 'B': 84231, 'S': 79720, 'C': 65357, 'H': 59004, 'P': 50979}), ('H', 'B'): Counter({'O': 197118, 'F': 165039, 'N': 148932, 'K': 116683, 'V': 84778, 'B': 83329, 'S': 78999, 'C': 64921, 'H': 58946, 'P': 49832}), ('V', 'N'): Counter({'O': 191841, 'F': 164975, 'N': 142272, 'K': 115340, 'V': 92452, 'S': 81779, 'B': 81632, 'C': 65511, 'H': 59403, 'P': 53372}), ('F', 'B'): Counter({'O': 195304, 'F': 164600, 'N': 147707, 'K': 117096, 'V': 86331, 'B': 83218, 'S': 78920, 'C': 65363, 'H': 59323, 'P': 50715}), ('O', 'C'): Counter({'O': 195077, 'F': 164263, 'N': 149532, 'K': 119936, 'V': 84005, 'B': 82208, 'S': 77532, 'C': 65775, 'H': 59803, 'P': 50446}), ('O', 'O'): Counter({'O': 194746, 'F': 164409, 'N': 148919, 'K': 120125, 'V': 84566, 'B': 81022, 'S': 77206, 'C': 66198, 'H': 59517, 'P': 51869}), ('P', 'C'): Counter({'O': 195398, 'F': 163923, 'N': 151014, 'K': 120993, 'V': 82309, 'B': 82124, 'S': 76366, 'C': 66239, 'H': 59891, 'P': 50320}), ('F', 'K'): Counter({'O': 193597, 'F': 163804, 'N': 152915, 'K': 127609, 'V': 79631, 'B': 77476, 'S': 74440, 'C': 66710, 'H': 60761, 'P': 51634}), ('O', 'P'): Counter({'O': 192880, 'F': 164243, 'N': 148293, 'K': 121175, 'V': 85565, 'B': 80762, 'S': 77720, 'C': 66181, 'H': 60175, 'P': 51583}), ('B', 'H'): Counter({'O': 196155, 'F': 165089, 'N': 145857, 'K': 114085, 'V': 88288, 'B': 84128, 'S': 80409, 'C': 64916, 'H': 58773, 'P': 50877}), ('N', 'P'): Counter({'O': 194590, 'F': 165078, 'N': 143816, 'K': 113247, 'V': 90774, 'B': 84069, 'S': 81539, 'C': 65013, 'H': 58922, 'P': 51529}), ('K', 'F'): Counter({'O': 195474, 'F': 165892, 'N': 138660, 'K': 106894, 'V': 96263, 'B': 85360, 'S': 84879, 'C': 64404, 'H': 57977, 'P': 52774}), ('S', 'K'): Counter({'O': 193985, 'F': 164872, 'N': 144418, 'K': 116189, 'V': 89561, 'B': 81535, 'S': 80326, 'C': 65673, 'H': 59293, 'P': 52725}), ('H', 'N'): Counter({'O': 194414, 'F': 165378, 'N': 142158, 'K': 111963, 'V': 92648, 'B': 83557, 'S': 82377, 'C': 64916, 'H': 58536, 'P': 52630}), ('C', 'B'): Counter({'O': 194869, 'F': 165644, 'N': 140864, 'K': 109461, 'V': 94069, 'B': 85116, 'S': 83070, 'C': 64849, 'H': 58293, 'P': 52342}), ('S', 'N'): Counter({'O': 193597, 'F': 163803, 'N': 152917, 'K': 127607, 'V': 79631, 'B': 77476, 'S': 74441, 'C': 66710, 'H': 60761, 'P': 51634}), ('V', 'F'): Counter({'O': 192644, 'F': 166377, 'N': 132554, 'V': 103799, 'K': 101829, 'S': 88622, 'B': 86603, 'C': 64166, 'H': 57604, 'P': 54379}), ('K', 'C'): Counter({'O': 196815, 'F': 164604, 'N': 152277, 'K': 121397, 'B': 81722, 'V': 80906, 'S': 76493, 'C': 65338, 'H': 59548, 'P': 49477}), ('H', 'F'): Counter({'O': 192945, 'F': 166515, 'N': 130615, 'V': 105589, 'K': 100267, 'S': 89146, 'B': 86497, 'C': 64140, 'H': 57417, 'P': 55446}), ('N', 'C'): Counter({'O': 195546, 'F': 164711, 'N': 148019, 'K': 116930, 'V': 86013, 'B': 83414, 'S': 78914, 'C': 65402, 'H': 59291, 'P': 50337}), ('B', 'N'): Counter({'O': 192241, 'F': 163788, 'N': 148033, 'K': 123420, 'V': 85082, 'B': 78631, 'S': 77032, 'C': 66809, 'H': 60692, 'P': 52849}), ('K', 'O'): Counter({'O': 195803, 'F': 165710, 'N': 142329, 'K': 110638, 'V': 92285, 'B': 84383, 'S': 82836, 'C': 64483, 'H': 58283, 'P': 51827}), ('P', 'S'): Counter({'O': 194035, 'F': 164903, 'N': 144054, 'K': 113742, 'V': 90748, 'B': 83967, 'S': 81556, 'C': 65071, 'H': 59103, 'P': 51398}), ('H', 'O'): Counter({'O': 194856, 'F': 166816, 'N': 135757, 'K': 103252, 'V': 100390, 'S': 87331, 'B': 86127, 'C': 63468, 'H': 57102, 'P': 53478}), ('C', 'H'): Counter({'O': 194869, 'F': 165644, 'N': 140864, 'K': 109461, 'V': 94069, 'B': 85115, 'S': 83070, 'C': 64849, 'H': 58294, 'P': 52342}), ('K', 'P'): Counter({'O': 193597, 'F': 163803, 'N': 152915, 'K': 127609, 'V': 79631, 'B': 77476, 'S': 74440, 'C': 66710, 'H': 60761, 'P': 51635}), ('V', 'K'): Counter({'O': 191280, 'F': 166028, 'N': 132703, 'V': 103905, 'K': 103180, 'S': 88519, 'B': 86185, 'C': 64280, 'H': 58000, 'P': 54497}), ('B', 'B'): Counter({'O': 192652, 'F': 164639, 'N': 142838, 'K': 114505, 'V': 91794, 'B': 82891, 'S': 81654, 'C': 65636, 'H': 59482, 'P': 52486}), ('B', 'F'): Counter({'O': 192329, 'F': 164351, 'N': 142640, 'K': 116622, 'V': 91297, 'B': 80937, 'S': 80630, 'C': 66260, 'H': 59942, 'P': 53569}), ('C', 'S'): Counter({'O': 193914, 'F': 165146, 'N': 141836, 'K': 112528, 'V': 92763, 'B': 83053, 'S': 82433, 'C': 65186, 'H': 58920, 'P': 52798}), ('C', 'N'): Counter({'O': 194945, 'F': 165473, 'N': 140749, 'K': 109541, 'V': 94165, 'B': 84849, 'S': 83229, 'C': 64767, 'H': 58274, 'P': 52585}), ('P', 'K'): Counter({'O': 194274, 'F': 163971, 'N': 149483, 'K': 120905, 'V': 83987, 'B': 81448, 'S': 77090, 'C': 66331, 'H': 60088, 'P': 51000}), ('S', 'H'): Counter({'O': 195848, 'F': 165414, 'N': 145106, 'K': 113130, 'V': 89513, 'B': 84333, 'S': 80975, 'C': 64722, 'H': 58504, 'P': 51032}), ('B', 'C'): Counter({'O': 196113, 'F': 164446, 'N': 150546, 'K': 119945, 'V': 82905, 'B': 82138, 'S': 77386, 'C': 65532, 'H': 59564, 'P': 50002}), ('F', 'N'): Counter({'O': 193597, 'F': 163804, 'N': 152917, 'K': 127607, 'V': 79631, 'B': 77476, 'S': 74440, 'C': 66710, 'H': 60761, 'P': 51634}), ('B', 'K'): Counter({'O': 191991, 'F': 163341, 'N': 151948, 'K': 128642, 'V': 80637, 'B': 76561, 'S': 74390, 'C': 67380, 'H': 61300, 'P': 52387}), ('P', 'N'): Counter({'O': 193952, 'F': 164028, 'N': 147425, 'K': 119567, 'V': 86090, 'B': 81284, 'S': 78230, 'C': 66281, 'H': 60058, 'P': 51662}), ('P', 'O'): Counter({'O': 194896, 'F': 163953, 'N': 150400, 'K': 121157, 'V': 82888, 'B': 81596, 'S': 75925, 'C': 66577, 'H': 59759, 'P': 51426}), ('S', 'C'): Counter({'O': 194223, 'F': 165606, 'N': 137428, 'K': 108161, 'V': 97110, 'S': 84652, 'B': 83685, 'C': 65055, 'H': 58426, 'P': 54231}), ('N', 'O'): Counter({'O': 195254, 'F': 166146, 'N': 140072, 'K': 108506, 'V': 95208, 'B': 84421, 'S': 84331, 'C': 64093, 'H': 57783, 'P': 52763}), ('K', 'N'): Counter({'O': 195097, 'F': 164807, 'N': 146041, 'K': 116295, 'V': 87837, 'B': 82635, 'S': 79726, 'C': 65363, 'H': 59247, 'P': 51529}), ('V', 'B'): Counter({'O': 195124, 'F': 164501, 'N': 146757, 'K': 116517, 'V': 87236, 'B': 83363, 'S': 79183, 'C': 65430, 'H': 59321, 'P': 51145}), ('S', 'F'): Counter({'O': 194557, 'F': 165822, 'N': 136480, 'K': 104867, 'V': 98981, 'S': 86086, 'B': 86028, 'C': 64460, 'H': 57807, 'P': 53489}), ('F', 'H'): Counter({'O': 195304, 'F': 164600, 'N': 147707, 'K': 117096, 'V': 86331, 'B': 83217, 'S': 78920, 'C': 65363, 'H': 59324, 'P': 50715}), ('F', 'F'): Counter({'O': 193654, 'F': 164401, 'N': 145248, 'K': 116983, 'V': 88721, 'B': 82051, 'S': 79866, 'C': 65926, 'H': 59753, 'P': 51974}), ('V', 'O'): Counter({'O': 192995, 'F': 166362, 'N': 134863, 'K': 103940, 'V': 101507, 'S': 87631, 'B': 86097, 'C': 63870, 'H': 57663, 'P': 53649}), ('P', 'H'): Counter({'O': 194856, 'F': 165315, 'N': 139512, 'K': 108387, 'V': 95339, 'B': 85219, 'S': 84112, 'C': 64917, 'H': 58539, 'P': 52381}), ('C', 'K'): Counter({'O': 193082, 'F': 164195, 'N': 146426, 'K': 119617, 'V': 87232, 'B': 80809, 'S': 78446, 'C': 66218, 'H': 59993, 'P': 52559}), ('F', 'C'): Counter({'O': 194742, 'F': 163891, 'N': 153592, 'K': 124954, 'B': 80473, 'V': 79576, 'S': 74873, 'C': 66265, 'H': 60404, 'P': 49807}), ('V', 'V'): Counter({'O': 192418, 'F': 165864, 'N': 136461, 'K': 106976, 'V': 99351, 'S': 85804, 'B': 85169, 'C': 64532, 'H': 58328, 'P': 53674}), ('V', 'H'): Counter({'O': 194512, 'F': 165645, 'N': 141940, 'K': 110515, 'V': 93253, 'B': 84921, 'S': 82903, 'C': 64621, 'H': 58307, 'P': 51960}), ('O', 'F'): Counter({'O': 194896, 'F': 163954, 'N': 150400, 'K': 121157, 'V': 82888, 'B': 81596, 'S': 75925, 'C': 66577, 'H': 59759, 'P': 51425}), ('H', 'P'): Counter({'O': 193411, 'F': 163683, 'N': 153053, 'K': 127184, 'V': 79735, 'B': 78206, 'S': 74558, 'C': 66748, 'H': 60832, 'P': 51167}), ('C', 'O'): Counter({'O': 193637, 'F': 166235, 'N': 133379, 'V': 102643, 'K': 102091, 'S': 88110, 'B': 86476, 'C': 64204, 'H': 57534, 'P': 54268}), ('V', 'S'): Counter({'O': 191280, 'F': 166028, 'N': 132703, 'V': 103905, 'K': 103179, 'S': 88520, 'B': 86185, 'C': 64280, 'H': 58000, 'P': 54497}), ('S', 'B'): Counter({'O': 195398, 'F': 165484, 'N': 141635, 'K': 109750, 'V': 93200, 'B': 84956, 'S': 83160, 'C': 64790, 'H': 58354, 'P': 51850}), ('S', 'S'): Counter({'O': 194478, 'F': 165701, 'N': 140446, 'K': 110498, 'V': 94305, 'B': 83543, 'S': 83349, 'C': 64738, 'H': 58405, 'P': 53114}), ('C', 'F'): Counter({'O': 194286, 'F': 165181, 'N': 141097, 'K': 110653, 'V': 93613, 'B': 84513, 'S': 82331, 'C': 65417, 'H': 58564, 'P': 52922}), ('O', 'K'): Counter({'O': 191648, 'F': 165442, 'N': 137442, 'K': 108515, 'V': 98385, 'S': 85250, 'B': 84831, 'C': 64859, 'H': 58673, 'P': 53532}), ('O', 'N'): Counter({'O': 193811, 'F': 163986, 'N': 149591, 'K': 122205, 'V': 83698, 'B': 80473, 'S': 76611, 'C': 66504, 'H': 60287, 'P': 51411}), ('N', 'S'): Counter({'O': 194820, 'F': 165921, 'N': 141724, 'K': 111165, 'V': 93118, 'B': 83380, 'S': 82931, 'C': 64506, 'H': 58222, 'P': 52790}), ('S', 'O'): Counter({'O': 194797, 'F': 166082, 'N': 140251, 'K': 108600, 'V': 95166, 'B': 85043, 'S': 84364, 'C': 64116, 'H': 58002, 'P': 52156}), ('N', 'V'): Counter({'O': 191280, 'F': 166028, 'N': 132704, 'V': 103905, 'K': 103179, 'S': 88519, 'B': 86185, 'C': 64280, 'H': 58000, 'P': 54497}), ('N', 'H'): Counter({'O': 195090, 'F': 164387, 'N': 150365, 'K': 121964, 'V': 82800, 'B': 80249, 'S': 76910, 'C': 65908, 'H': 59856, 'P': 51048}), ('N', 'N'): Counter({'O': 194108, 'F': 164008, 'N': 150935, 'K': 124174, 'V': 82047, 'B': 78956, 'S': 76114, 'C': 66425, 'H': 60332, 'P': 51478}), ('K', 'H'): Counter({'O': 197118, 'F': 165039, 'N': 148932, 'K': 116684, 'V': 84778, 'B': 83328, 'S': 78999, 'C': 64921, 'H': 58946, 'P': 49832}), ('F', 'V'): Counter({'O': 192869, 'F': 164794, 'N': 143341, 'K': 114805, 'V': 91334, 'B': 82831, 'S': 81437, 'C': 65473, 'H': 59407, 'P': 52286}), ('K', 'K'): Counter({'O': 194108, 'F': 164008, 'N': 150934, 'K': 124175, 'V': 82047, 'B': 78956, 'S': 76114, 'C': 66425, 'H': 60332, 'P': 51478}), ('O', 'B'): Counter({'O': 195525, 'F': 164176, 'N': 149963, 'K': 119285, 'V': 83641, 'B': 82687, 'S': 77217, 'C': 66048, 'H': 59575, 'P': 50460}), ('N', 'K'): Counter({'O': 193182, 'F': 163471, 'N': 154136, 'K': 129700, 'V': 78214, 'B': 76564, 'S': 73482, 'C': 67018, 'H': 61092, 'P': 51718}), ('C', 'C'): Counter({'O': 193810, 'F': 165558, 'N': 138267, 'K': 109390, 'V': 96261, 'S': 84063, 'B': 83408, 'C': 65192, 'H': 58641, 'P': 53987}), ('P', 'P'): Counter({'O': 193722, 'F': 163717, 'N': 150692, 'K': 123690, 'V': 82447, 'B': 79817, 'S': 76093, 'C': 66600, 'H': 60479, 'P': 51320}), ('P', 'F'): Counter({'O': 193746, 'F': 165971, 'N': 133006, 'V': 102551, 'K': 102279, 'S': 87777, 'B': 86500, 'C': 64525, 'H': 57885, 'P': 54337}), ('H', 'C'): Counter({'O': 194592, 'F': 163883, 'N': 153320, 'K': 125306, 'B': 79953, 'V': 79683, 'S': 74712, 'C': 66448, 'H': 60426, 'P': 50254}), ('P', 'V'): Counter({'O': 193187, 'F': 165518, 'N': 136721, 'K': 107249, 'V': 98540, 'S': 85411, 'B': 84951, 'C': 64909, 'H': 58586, 'P': 53505}), ('B', 'V'): Counter({'O': 190957, 'F': 164934, 'N': 139348, 'K': 113015, 'V': 95692, 'S': 83267, 'B': 82237, 'C': 65652, 'H': 59447, 'P': 54028}), ('N', 'F'): Counter({'O': 193597, 'F': 163804, 'N': 152917, 'K': 127607, 'V': 79631, 'B': 77476, 'S': 74440, 'C': 66710, 'H': 60761, 'P': 51634}), ('H', 'V'): Counter({'O': 194062, 'F': 166469, 'N': 133844, 'K': 103267, 'V': 101677, 'S': 87383, 'B': 85249, 'C': 64253, 'H': 57566, 'P': 54807}), ('H', 'H'): Counter({'O': 195150, 'F': 164496, 'N': 147471, 'K': 117347, 'V': 86415, 'B': 82936, 'S': 78796, 'C': 65526, 'H': 59393, 'P': 51047}), ('H', 'S'): Counter({'O': 194044, 'F': 166837, 'N': 134438, 'K': 102362, 'V': 101903, 'S': 88148, 'B': 86230, 'C': 63562, 'H': 57098, 'P': 53955}), ('C', 'P'): Counter({'O': 193094, 'F': 165288, 'N': 139939, 'K': 110777, 'V': 95146, 'B': 83906, 'S': 83424, 'C': 65086, 'H': 58791, 'P': 53126})}

# for each possible pair of keys, figure out what the count-per-instruction will be after 20 generations
meta_counts = {}
for pair in instructions.keys():
    print(f'MetaGen: {pair}')
    _, counts = generate_counts(pair, 20)
    meta_counts[pair] = counts


count_sums = {}
for pair in instructions.keys():
    count_sums[pair[0]] = 0
    count_sums[pair[1]] = 0

print(f'Meta Counts: {meta_counts}')

# figure out what the polymer will look like after 20 generations
step_20, _ = generate_counts(initial_polymer, 20)

# for each pair in the 20th-generation polymer,
for i in range(len(step_20) - 1):
    pair = (step_20[i], step_20[i+1])
    # add the counts that this pair will generate over the next 20 generations
    for code, value in meta_counts[pair].items():
        count_sums[code] += value
    # but subtract 1 because the last character of this pattern is the first character of the next pattern
    count_sums[pair[1]] -= 1
# and add the last character back in, because it was subtracted above and had no next pair
count_sums[step_20[-1]] += 1

print(f'Count Sums: {count_sums}')
most = max(count_sums.values())
least = min(count_sums.values())
print(f'Score: {most - least}')